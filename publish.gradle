apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

bintray {
    user = properties['bintray.user']
    key = properties['bintray.key']
    publications = ['Publication']
    pkg {
        repo = 'maven'
        desc = 'Provides Kotlin Coroutines suspendable await() extensions for Retrofit Call'
        githubRepo = 'https://github.com/gildor/kotlin-coroutines-retrofit'
        githubReleaseNotesFile = 'README.md'
        websiteUrl = githubRepo
        issueTrackerUrl = "${githubRepo}/issues"
        vcsUrl = "${githubRepo}.git"
        licenses = ["Apache-2.0"]
        labels = ['retrofit', 'kotlin', 'coroutines']
        version {
            name = project.version
            released  = new Date()
            vcsTag = "v${project.version}"
        }
        dryRun = false
    }
}

// Create the pom configuration:
def pomConfig = {
    developers {
        developer {
            name "Andrey Mischenko"
            email "git@gildor.ru"
            organizationUrl "https://github.com/gildor"
        }
    }
    scm {
        url bintray.pkg.githubRepo
        connection "scm:git:${bintray.pkg.vcsUrl}"
        developerConnection "scm:git:${bintray.pkg.vcsUrl}"
        tag bintray.pkg.version.vcsTag
    }
    issueManagement {
        system "GitHub Issues"
        url bintray.pkg.issueTrackerUrl
    }
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
        }
    }
}

publishing {
    publications {
        Publication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Kotlin Coroutines for Retrofit')
                root.appendNode('description', bintray.pkg.desc)
                root.appendNode('url', bintray.pkg.websiteUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


